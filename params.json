{
  "name": "Camerafilters",
  "tagline": "摄像头实时滤镜处理库,自带10多种滤镜,支持滤镜扩展,并且兼容七牛云直播滤镜处理",
  "body": "# CameraFilters\r\n##摄像头实时滤镜处理库,自带10多种滤镜,支持滤镜扩展,并且兼容七牛云直播滤镜处理\r\n\r\n##Usage\r\n###Declare permissions:\r\n```\r\n <uses-permission android:name=\"android.permission.CAMERA\"/>\r\n```\r\n###Step 1\r\n```\r\n mFilterManager = FilterManager\r\n                .builder()\r\n                .context(mApplicationContext)\r\n                .isUseQiniu(false)//是否在qiniu云直播上使用滤镜\r\n                .addExtFilterListener(new onExtFilterListener() {//添加扩展的滤镜,因为滤镜创建必须在render的回调中,所以统一在这里管理滤镜\r\n                    @Override\r\n                    public IFilter onCreateExtFilter(Context context, int index) {\r\n                        switch (index) {\r\n                            case 0://继承于cameraFitlter后可自定义filter,此Filter可任意添加一张图片到界面上\r\n                                return new CameraFilterBlend(context, R.mipmap.\r\n                                        pic_addpic);\r\n                            default:\r\n                                return new CameraFilter(context, false);\r\n                        }\r\n                    }\r\n                })\r\n                .defaultFilter(new FilterInfo(false, 0))//设置默认滤镜(false为使用内置滤镜,角标范围是0-13,0为透明滤镜)\r\n                .build();\r\n```\r\n###Step 2\r\n* 在``GLSurfaceView.Renderer``的三个回调方法中，将参数传给``FilterManager``对应的方法.\r\n* onSurfaceCreated ---> FilterManager.initialize();\r\n* onSurfaceChanged ---> FilterManager.updateSurfaceSize(width, height);\r\n* onDrawFrame ---> mFilterManager.drawFrame(mTextureId, mSTMatrix, mIncomingWidth, mIncomingHeight);\r\n* 以上为``GLSurfaceView.Renderer ``回调和``FilterManager``方法的对应关系（请参照Demo）\r\n* 最后在结束时记得调用``mFilterManager.release()``释放资源\r\n\r\n###Step 3 ( if you use qiniu see here )\r\n```\r\n mCameraStreamingManager.setSurfaceTextureCallback(new SurfaceTextureCallback() {\r\n            @Override\r\n            public void onSurfaceCreated() {\r\n               mFilterManager.initialize();\r\n            }\r\n\r\n            @Override\r\n            public void onSurfaceChanged(int i, int i1) {\r\n               mFilterManager.updateSurfaceSize(i, i1);\r\n            }\r\n\r\n            @Override\r\n            public void onSurfaceDestroyed() {\r\n                mFilterManager.release();\r\n            }\r\n\r\n            @Override\r\n            public int onDrawFrame(int i, int i1, int i2, float[] floats) {\r\n               return mFilterManager.drawFrame(var1, null, var2, var3);\r\n            }\r\n        });\r\n\r\n```\r\n* 在七牛直播上使用滤镜也非常简单,和第二步相似，记得``FilterManager.isUseQiniu(true)`` & ``mFilterManager.drawFrame(var1, null, var2, var3);``第二个参数一定要传null\r\n\r\n## Dev tips\r\n具体用法参照``Demo``,有``Opengl``基础的可以自定义滤镜\r\n\r\n\r\n##About Me\r\n* **Email**: jess.yan.effort@gmail.com\r\n\r\n##License\r\n```\r\n Copyright 2016, jessyan\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}